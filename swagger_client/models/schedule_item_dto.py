# coding: utf-8

"""
    DSF Data Security Fabric Open APIs

    DSF Data Security Fabric Open APIs Documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduleItemDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'group_display_name': 'str',
        'url': 'str',
        'cron': 'str',
        'type': 'str',
        'paused': 'bool',
        'user': 'str',
        'item_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'group_display_name': 'groupDisplayName',
        'url': 'url',
        'cron': 'cron',
        'type': 'type',
        'paused': 'paused',
        'user': 'user',
        'item_id': 'itemId'
    }

    def __init__(self, id=None, name=None, group_display_name=None, url=None, cron=None, type=None, paused=None, user=None, item_id=None):  # noqa: E501
        """ScheduleItemDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._group_display_name = None
        self._url = None
        self._cron = None
        self._type = None
        self._paused = None
        self._user = None
        self._item_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if group_display_name is not None:
            self.group_display_name = group_display_name
        if url is not None:
            self.url = url
        if cron is not None:
            self.cron = cron
        if type is not None:
            self.type = type
        if paused is not None:
            self.paused = paused
        if user is not None:
            self.user = user
        if item_id is not None:
            self.item_id = item_id

    @property
    def id(self):
        """Gets the id of this ScheduleItemDto.  # noqa: E501


        :return: The id of this ScheduleItemDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduleItemDto.


        :param id: The id of this ScheduleItemDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ScheduleItemDto.  # noqa: E501


        :return: The name of this ScheduleItemDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleItemDto.


        :param name: The name of this ScheduleItemDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def group_display_name(self):
        """Gets the group_display_name of this ScheduleItemDto.  # noqa: E501


        :return: The group_display_name of this ScheduleItemDto.  # noqa: E501
        :rtype: str
        """
        return self._group_display_name

    @group_display_name.setter
    def group_display_name(self, group_display_name):
        """Sets the group_display_name of this ScheduleItemDto.


        :param group_display_name: The group_display_name of this ScheduleItemDto.  # noqa: E501
        :type: str
        """

        self._group_display_name = group_display_name

    @property
    def url(self):
        """Gets the url of this ScheduleItemDto.  # noqa: E501


        :return: The url of this ScheduleItemDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ScheduleItemDto.


        :param url: The url of this ScheduleItemDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def cron(self):
        """Gets the cron of this ScheduleItemDto.  # noqa: E501


        :return: The cron of this ScheduleItemDto.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this ScheduleItemDto.


        :param cron: The cron of this ScheduleItemDto.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def type(self):
        """Gets the type of this ScheduleItemDto.  # noqa: E501


        :return: The type of this ScheduleItemDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScheduleItemDto.


        :param type: The type of this ScheduleItemDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def paused(self):
        """Gets the paused of this ScheduleItemDto.  # noqa: E501


        :return: The paused of this ScheduleItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this ScheduleItemDto.


        :param paused: The paused of this ScheduleItemDto.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def user(self):
        """Gets the user of this ScheduleItemDto.  # noqa: E501


        :return: The user of this ScheduleItemDto.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ScheduleItemDto.


        :param user: The user of this ScheduleItemDto.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def item_id(self):
        """Gets the item_id of this ScheduleItemDto.  # noqa: E501


        :return: The item_id of this ScheduleItemDto.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ScheduleItemDto.


        :param item_id: The item_id of this ScheduleItemDto.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleItemDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleItemDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
